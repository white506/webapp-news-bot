import React, { useEffect, useState } from 'react';
import { NewsCard } from '@entities/News';
import type { News } from '@entities/News';
import telegramApi from '@shared/api/telegramApi';
import styles from './NewsBlock.module.scss';

interface NewsBlockProps {
  className?: string;
}

export const NewsBlock: React.FC<NewsBlockProps> = ({ className = '' }) => {
  const [news, setNews] = useState<News | undefined>(undefined);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchNews = async () => {
    try {
      setIsLoading(true);
      setError(null);
      const latestNews = await telegramApi.getLatestNews();
      setNews(latestNews);
    } catch (err) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      console.error('Error fetching news:', err);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchNews();

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç Telegram
    const unsubscribe = telegramApi.on('news_update', (newsData: News) => {
      setNews(newsData);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const intervalId = setInterval(fetchNews, 30000);

    return () => {
      unsubscribe();
      clearInterval(intervalId);
    };
  }, []);

  const handleRefresh = () => {
    fetchNews();
  };

  return (
    <div className={`${styles['news-block']} ${className}`}>
      <div className={styles['news-block__header']}>
        <h2 className={styles['news-block__title']}>–ù–æ–≤–æ—Å—Ç–∏</h2>
        <div 
          className={styles['news-block__refresh']} 
          onClick={handleRefresh}
        >
          <span className={styles['news-block__refresh-icon']}>üîÑ</span>
          –û–±–Ω–æ–≤–∏—Ç—å
        </div>
      </div>

      {error && (
        <div className={styles['news-block__error']}>
          {error}
        </div>
      )}

      <NewsCard news={news} isLoading={isLoading} />
    </div>
  );
};

export default NewsBlock; 